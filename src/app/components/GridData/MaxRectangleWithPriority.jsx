import * as turf from "@turf/turf";

const MaxRectangleWithPriority = (verDispo, priorityVertices) => {
	// Validaci√≥n del pol√≠gono
	if (!verDispo || verDispo.length < 3) {
		console.error("‚ùå Error: verDispo no es un pol√≠gono v√°lido.", verDispo);
		return [];
	}

	// Validaci√≥n de v√©rtices prioritarias
	if (!priorityVertices || priorityVertices.length === 0) {
		console.error(
			"‚ùå Error: No hay v√©rtices prioritarios.",
			priorityVertices
		);
		return [];
	}

	// Crear el pol√≠gono disponible usando Turf.js
	const poligonoDisponible = turf.polygon([verDispo.concat([verDispo[0]])]);

	let mejorArea = 0;
	let mejorRectangulo = null;

	// Iterar sobre cada v√©rtice prioritario
	for (const vertice of priorityVertices) {
		console.log("üìå Probando v√©rtice prioritario:", vertice);

		// Verificar si el v√©rtice prioritario est√° en el borde del pol√≠gono
		const puntoPrioritario = turf.point(vertice);
		const estaEnElBorde = verificarSiEstaEnElBorde(
			puntoPrioritario,
			poligonoDisponible
		);

		if (!estaEnElBorde) {
			console.warn(
				"‚ö†Ô∏è El v√©rtice prioritario no est√° en el borde del pol√≠gono:",
				vertice
			);
			continue;
		}

		// Buscar el rect√°ngulo m√°ximo que incluye el v√©rtice prioritario
		const rectangulo = buscarRectanguloMaximo(vertice, poligonoDisponible);

		if (rectangulo) {
			const areaRectangulo = turf.area(rectangulo);

			// Actualizar el mejor rect√°ngulo si el √°rea es mayor
			if (areaRectangulo > mejorArea) {
				mejorArea = areaRectangulo;
				mejorRectangulo = rectangulo;
				console.log(
					"‚úÖ Nuevo mejor rect√°ngulo encontrado:",
					mejorRectangulo.geometry.coordinates[0]
				);
			}
		}
	}

	if (!mejorRectangulo) {
		console.warn("‚ö†Ô∏è No se pudo calcular un rect√°ngulo v√°lido.");
		return [];
	}

	return mejorRectangulo.geometry.coordinates[0];
};

// Funci√≥n para verificar si un punto est√° en el borde del pol√≠gono
const verificarSiEstaEnElBorde = (punto, poligono) => {
	const lineasDelPoligono = turf.polygonToLine(poligono);
	return turf.booleanPointOnLine(punto, lineasDelPoligono);
};

// Funci√≥n para buscar el rect√°ngulo m√°ximo que incluye el v√©rtice prioritario
const buscarRectanguloMaximo = (vertice, poligono) => {
	let mejorRectangulo = null;
	let mejorArea = 0;

	// Definir los l√≠mites de b√∫squeda
	const step = 0.1; // Paso de b√∫squeda (ajusta seg√∫n sea necesario)
	const maxIteraciones = 100; // L√≠mite de iteraciones para evitar bucles infinitos

	// Iterar sobre posibles anchos y altos
	for (let width = step; width <= 100; width += step) {
		for (let height = step; height <= 100; height += step) {
			// Crear el rect√°ngulo
			const rectangulo = turf.polygon([
				[
					[vertice[0], vertice[1]],
					[vertice[0] + width, vertice[1]],
					[vertice[0] + width, vertice[1] - height],
					[vertice[0], vertice[1] - height],
					[vertice[0], vertice[1]],
				],
			]);

			// Verificar si el rect√°ngulo est√° dentro del pol√≠gono
			if (turf.booleanWithin(rectangulo, poligono)) {
				const areaRectangulo = turf.area(rectangulo);

				// Actualizar el mejor rect√°ngulo si el √°rea es mayor
				if (areaRectangulo > mejorArea) {
					mejorArea = areaRectangulo;
					mejorRectangulo = rectangulo;
				}
			}
		}
	}

	return mejorRectangulo;
};

export default MaxRectangleWithPriority;
